[["data-transformation.html", "Chapter 3 Data transformation 3.1 Game statistics 3.2 Injuries 3.3 Player positions", " Chapter 3 Data transformation 3.1 Game statistics When using the NBA stats R package, requested data comes as a nested dataframe. Each row has data for a single season, with either regular season or playoff data. So if you requested 2018-19 and 2019-2020 data for the regular season and playoffs, 4 rows would be returned. A column at the end has the actual game stats dataframes, so these must be unnested. covid_season_month_before &lt;- teams_players_stats(seasons = 2020, measures = &quot;Advanced&quot;, types = &quot;team&quot;, tables = &quot;general&quot;, modes = &quot;PerGame&quot;, date_from = &quot;2-11-20&quot;, date_to = &quot;3-11-20&quot;) %&gt;% unnest(dataTable) %&gt;% mutate(df_type = &quot;month_before&quot;) bubble &lt;- teams_players_stats(seasons = 2020, measures = &quot;Advanced&quot;, types = &quot;team&quot;, season_types = c(&quot;Regular Season&quot;, &quot;Playoffs&quot;), tables = &quot;general&quot;, modes = &quot;PerGame&quot;, date_from = &quot;7-29-20&quot;, date_to = &quot;10-11-20&quot;) %&gt;% unnest(dataTable) We split the time periods that we wanted to compare into separate dataframes and added a new column, df_type, to distinguish them. bubble_seeding &lt;- bubble %&gt;% filter(typeSeason == &quot;Regular Season&quot;) %&gt;% mutate(df_type = &quot;bubble_seeding&quot;) bubble_playoffs &lt;- bubble %&gt;% filter(typeSeason == &quot;Playoffs&quot;) %&gt;% mutate(df_type = &quot;bubble_playoffs&quot;) Finally, we made the data long for it to work with ggplot. The data when requested comes wide, with a column for each statistic. bubble_stats_long &lt;- bind_rows(covid_season_month_before, bubble_seeding, bubble_playoffs,) %&gt;% select(nameTeam:paceE, df_type, -contains(&quot;rank&quot;)) %&gt;% #drop some stats we&#39;re not interested in pivot_longer(gp:paceE, names_to = &quot;rating&quot;, values_to = &quot;value&quot;) %&gt;% semi_join(bubble_teams, by = &quot;nameTeam&quot;) #only teams that were invited to bubble The same process was used for both team and player data because they come in the same form. 3.1.1 COVID cases Some additional steps were taken to integrate the COVID case data. The table from SLAM was crawled with rvest and cleaned slightly to be able to join onto the player stats. Furthermore, the dates were converted into date objects so that they would display in order on the x-axis. covid_players &lt;- read_html(&quot;https://www.slamonline.com/nba/nba-coronavirus-covid-list/&quot;) %&gt;% html_element(css = &quot;.wp-block-table&quot;) %&gt;% html_table(header = TRUE) covid_players_fixed &lt;- covid_players %&gt;% rename(name = &quot;Player&quot;, date_reported = &quot;Reported&quot;) %&gt;% mutate(team_abb = str_sub(name, -4, -2), name = str_remove(name, &quot; \\\\(.+\\\\)&quot;), date_reported = str_remove(date_reported, &quot; \\\\(.+\\\\)&quot;), date_reported = mdy(str_c(date_reported, &quot; 2020&quot;))) 3.2 Injuries 3.3 Player positions "]]
